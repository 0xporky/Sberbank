
Перем ИмяФормата;

#Область ПрограммныйИнтерфейс

// Возвращает Истина, если код в банке есть, Ложь - иначе
//
// Параметры: нет
//
// Возвращаемое значение:
//
//   Булево   – Истина, если код в банке есть, Ложь - иначе
//
Функция ЕстьКодВБанке() Экспорт
	Возврат Ложь;
КонецФункции

// Возвращает наименование кода в банке
//
// Параметры:
//
//	нет
//
// Возвращаемое значение:
//
// 	Строка - наименование кода
//
Функция ПолучитьНаименованиеКода() Экспорт
	Возврат "";
КонецФункции

// Возвращает код банка организации
//
// Параметры:
//
//  Структура Параметры
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
//
// Возвращаемое значение:
//
//   Строка   – код организации в банке
//
Функция кбПолучитьКодОрганизации(Параметры) Экспорт
	Возврат "";
КонецФункции

// Формирует имя файла по умолчанию
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"/"Экспорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
//		Ключ РСчет - Расчетный счет
// 
// Возвращаемое значение:
//
//   имя файла по умолчанию
//
Функция СформироватьИмяФайла(Параметры) Экспорт 
	ИмяФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" + Параметры.Режим);
	Если Параметры.Режим = "Импорт" Тогда
		Если ИмяФайла = Неопределено Тогда
			Возврат "Export" + "." + НРег(Параметры.ТипФайла);
		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	Иначе	
		Если ИмяФайла = Неопределено Тогда
			Возврат "Import.txt";
		Иначе
			Возврат ИмяФайла;
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

// Выбирает имя файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"
// 		Ключ Дата -  Дата выписки (импорт) - Дата
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - текущий тип файла ("DBF")
//
// Возвращаемое значение:
//
//   Строка   – выбранное имя файла
//
Функция ВыбратьИмяФайла(Параметры) Экспорт
	
	РежимДиалога = РежимДиалогаВыбораФайла.Открытие;
	Длг 		 = Новый ДиалогВыбораФайла(РежимДиалога);
	
	Длг.ПолноеИмяФайла = Параметры.ТекущееИмяФайла;
	Длг.Заголовок = "Выберите файл";
	Длг.Фильтр = "Все файлы (*.dbf)|*.dbf|(*.DBF)|*.DBF";
	Длг.Расширение = Параметры.ТекущийТипФайла;
	
	Если Длг.Выбрать() Тогда
		Возврат Длг.ПолноеИмяФайла;
	КонецЕсли;
	
	Возврат Параметры.ТекущееИмяФайла;
	
КонецФункции

// Возвращает сохраненный тип файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"
//
// Возвращаемое значение:
//
//   Строка – текущий тип файла ("DBF")
//
Функция ПолучитьТекущийТипФайла(Параметры) Экспорт
		
	Возврат "DBF";

КонецФункции

// Возвращает сохраненный кодировку файла
//
// Параметры:
//
// 	Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"
//
// Возвращаемое значение:
//
//   Строка – текущая кодировка файла ( "ANSI" / "OEM" )
//
Функция ПолучитьТекущуюКодировкуФайла(Параметры) Экспорт
	
	КодировкаФайла = ВосстановитьЗначение(ИмяФормата + Параметры.Организация +  "КодировкаФайла" + Параметры.Режим);
	
	Если КодировкаФайла = Неопределено Тогда
		Возврат "OEM"; // ANSI (Windows) или OEM (DOS)
	Иначе
		Возврат КодировкаФайла;
	КонецЕсли;	
	
КонецФункции

// Сохраняет значения для формата:
//
//	Имя файла
// 	Тип файла 
// 	Код в банке, если такой существует
//
// Параметры:
// 		Структура Параметры
//		Ключ Режим - Режим - Строка "Импорт"
// 		Ключ Организация - Организация - Справочник.Ссылки.Организация          
// 		Ключ КодВБанке - код в банке (если есть) 
//      Ключ ТекущееИмяФайла - строка - текущее имя файла в основной обработке
//      Ключ ТекущийТипФайла - строка - текущий тип файла в основной обработке
//  
Процедура СохранитьЗначения(Параметры) Экспорт
	
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ИмяФайла" 			+ Параметры.Режим, Параметры.ТекущееИмяФайла);
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "ТипФайла" 			+ Параметры.Режим, Параметры.ТекущийТипФайла);
	СохранитьЗначение(ИмяФормата + Параметры.Организация +  "КодировкаФайла" 	+ Параметры.Режим, Параметры.КодировкаФайла);
	Если ЕстьКодВБанке() Тогда 
		СохранитьЗначение(ИмяФормата + Параметры.Организация +  "КодВБанке", Параметры.КодВБанке); // если есть 
	КонецЕсли;	
	
КонецПроцедуры

// Обработка формата должна вернуть режимы и типы файлов, которая она поддерживает.
//
// Параметры: нет
//
//  Возвращаемое значение:
//
//	Возвращает структуру со следующими ключами:
//
//	Импорт (Истина/Ложь)
//	ИмпортTXT (Истина/Ложь)
//	ИмпортDBF (Истина/Ложь)
//	ИмпортXML (Истина/Ложь)
//	Экспорт (Истина/Ложь)
//	ЭкспортTXT (Истина/Ложь) 
//	ЭкспортDBF (Истина/Ложь)
//	ЭкспортXML (Истина/Ложь)
//
Функция ПолучитьПоддерживаемыеРежимы() Экспорт
	
	ИмпортЭкспорт = Новый Структура;
	ИмпортЭкспорт.Вставить("Импорт", Истина);
	ИмпортЭкспорт.Вставить("ИмпортTXT", Ложь);
	ИмпортЭкспорт.Вставить("ИмпортDBF", Истина);
	ИмпортЭкспорт.Вставить("ИмпортXML", Ложь);
	
	ИмпортЭкспорт.Вставить("Экспорт", Ложь);
	ИмпортЭкспорт.Вставить("ЭкспортTXT", Ложь);
	ИмпортЭкспорт.Вставить("ЭкспортDBF", Ложь);
	ИмпортЭкспорт.Вставить("ЭкспортXML", Ложь);
	
	Возврат ИмпортЭкспорт;
	
КонецФункции

// Осуществляет импорт выписки из файла
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("TXT"/"DBF"/"XML")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортВыписки(Параметры) Экспорт
	Если Параметры.ТипФайла = "DBF" Тогда
		Возврат ИмпортDBF(Параметры);	
	Иначе
		ТекстИсключения = НСтр("ru='Формат не поддерживается.';uk='Формат не підтримується.'"); 
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
КонецФункции

// Надо ли перекодировать текстовые поля (Контрагент, Содержание) после импорта. 
// Под перекодировкой понимается замена украинских символов
//
// Параметры: нет
//
//
// Возвращаемое значение:
//
//   Булево    – Истина - надо перекодировать/Ложь - не надо перекодировать
//
Функция ПерекодировкаИмпорта() Экспорт
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы
	
// Отказ от открытия обработки, выдаем сообщение о "служебности" обработки
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	 
	ТекстПредупреждения = НСтр("ru='Обработка вызывается только из ПП ""Обмен информацией между ПП ""1С:Предприятие 8.0"" и системами ""Клиент-Банк""';
	|uk='Обробка викликається тільки із ПЗ ""Обмін інформацією між ПЗ ""1С:Підприємство 8.0"" і системами ""Клієнт-Банк""'");
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения, , , , Отказ);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Осуществляет импорт выписки из файла типа "DBF"
//
// Параметры:
//
//	Структура Параметры   
//
// 		Ключ ДатаДок - Дата выписки  – дата 
// 		Ключ Организация - Организация - СправочникСсылка.Организации
//		Ключ РСчет - Расчетный счет организации - строка
//		Ключ ИмяФайла - Имя файла  - строка  
//		Ключ ТипФайла - Тип файла  - строка ("DBF")
//
//
// Возвращаемое значение:
//
//   Таблица значений тзВыписка
//		
//		тзВыписка - Таблица платежей – таблица значений тзВыписка с полями 
//			НомерПП – строка, номер платежного поручения 
//			Приход – число, сумма прихода
//			Расход – число, сумма расхода
//			ОКПО – строка, ЕДРПОУ контрагента
//			Контрагент – строка, наименование контрагента, как оно указано в выписке
//			МФО - строка, МФО банка контрагента
//			РСчет - строка, расчетный счет контрагента
//			Содержание - строка, содержание платежа
//
//		Если при импорте выписки произошли ошибки, возвращается Неопределенно.
//      
//      При проверке на дату платежа, если платежей с датой, которая отличается от переданной было > 0
//      необходимо выдать предупреждение
//
Функция ИмпортDBF(Параметры)
	
	ФайлDBF = Новый XBase;
	ФайлDBF.Кодировка = КодировкаXBase[Параметры.КодировкаФайла];    //DOS
	
	ИмяФайла = Параметры.ИмяФайла;
	
	Попытка
		ФайлDBF.ОткрытьФайл(ИмяФайла,,Истина); //Только для чтения
	Исключение
		
		ТекстОшибки = НСтр("ru='Ошибка открытия файла %1. %2.';
		|uk='Помилка відкриття файлу %1. %2.'"); 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						ИмяФайла,
						ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
		
	КонецПопытки;		
	
	Если НЕ ФайлDBF.Открыта() Тогда
		
		ТекстОшибки = НСтр("ru='Ошибка открытия файла %1. %2.';
		|uk='Помилка відкриття файлу %1. %2.'"); 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						ИмяФайла,
						ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
	
	тзВыписка =  Новый ТаблицаЗначений;
	тзВыписка.Колонки.Добавить("НомерПП");
	тзВыписка.Колонки.Добавить("Приход");
	тзВыписка.Колонки.Добавить("Расход");
	тзВыписка.Колонки.Добавить("ОКПО");
	тзВыписка.Колонки.Добавить("Контрагент");
	тзВыписка.Колонки.Добавить("МФО");
	тзВыписка.Колонки.Добавить("РСчет");
	тзВыписка.Колонки.Добавить("Содержание");
	
	ФайлDBF.Первая();
	Пока НЕ ФайлDBF.ВКонце() Цикл
		Если ФайлDBF.ЗаписьУдалена() Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		
		 //проверка на дату платежа
		Если ФайлDBF.dt <> Параметры.ДатаДок Тогда
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;	
		
		Если ФайлDBF.dk = 0 Тогда // Дебетовый документ (предположительно дебетовый для банка) - списание с р/счета клиента
			Если СокрЛП(Формат(ФайлDBF.acccli, "ЧГ=0")) <> Параметры.РСчет Тогда
				ФайлDBF.Следующая();
				Продолжить;
			КонецЕсли;
			НовСтрока = тзВыписка.Добавить();
			НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.acccli,"ЧГ=0"));
			НовСтрока.Расход		= ФайлDBF.summa;
			НовСтрока.Приход		= 0;
		ИначеЕсли ФайлDBF.DK = 1 Тогда // Кредитовый документ поступление на р/счет клиента
			Если СокрЛП(Формат(ФайлDBF.acccli, "ЧГ=0")) <> Параметры.РСчет Тогда
				ФайлDBF.Следующая();
				Продолжить;
			КонецЕсли;
			НовСтрока = тзВыписка.Добавить();
			НовСтрока.РСчет			= СокрЛП(Формат(ФайлDBF.acccli,"ЧГ=0"));
			НовСтрока.Приход		= ФайлDBF.summa;
            НовСтрока.Расход		= 0;
		Иначе
			ФайлDBF.Следующая();
			Продолжить;
		КонецЕсли;
		НовСтрока.ОКПО			= СокрЛП(Формат(ФайлDBF.okpocli,"ЧГ=0"));
		НовСтрока.Контрагент	= СокрЛП(ФайлDBF.namecli);
		НовСтрока.МФО 			= СокрЛП(Формат(ФайлDBF.mfocli,"ЧГ=0"));
		НовСтрока.Содержание 	= СтрЗаменить(ФайлDBF.nazn,Символы.ПС," ");
		
		ФайлDBF.Следующая();
	КонецЦикла;	
	
	Если НЕ тзВыписка.Количество() И ФайлDBF.КоличествоЗаписей() Тогда
		ТекстПредупрежения = НСтр("ru='В текущем файле нет платежей с данной датой выписки и расчетным счетом!';
		|uk='В поточному файлі відсутня виписка із вказаною датою і розрахунковим рахунком.'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупрежения);
	КонецЕсли;
	
	ФайлDBF.ЗакрытьФайл();
	
	Возврат тзВыписка;
	
КонецФункции
 	
#КонецОбласти 

ИмяФормата = НСтр("ru='Сбербанк';uk='Ощадбанк'");
